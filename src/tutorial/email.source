CREATE FUNCTION email_in(cstring)
   RETURNS EmailAddress
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_out(EmailAddress)
   RETURNS cstring
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_recv(internal)
   RETURNS EmailAddress
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_send(EmailAddress)
   RETURNS bytea
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE TYPE EmailAddress (
   internallength = 256,
   input = email_in,
   output = email_out,
   send = email_send,
   receive = email_recv,
   alignment = double
);

CREATE FUNCTION email_lt(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_le(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_eq(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_neq(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_ge(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_gt(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_domain_eq(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_domain_neq(EmailAddress, EmailAddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE OPERATOR = (
    LEFTARG    = EmailAddress,
    RIGHTARG   = EmailAddress,
    COMMUTATOR = =,
    NEGATOR    = <>,
    PROCEDURE  = email_eq,
    RESTRICT   = eqsel,
    JOIN       = eqjoinsel,
    HASHES,
    MERGES
);

CREATE OPERATOR <> (
    LEFTARG    = EmailAddress,
    RIGHTARG   = EmailAddress,
    NEGATOR    = =,
    COMMUTATOR = <>,
    PROCEDURE  = email_neq,
    RESTRICT   = neqsel,
    JOIN       = neqjoinsel
);

CREATE OPERATOR < (
    LEFTARG    = EmailAddress,
    RIGHTARG   = EmailAddress,
    NEGATOR    = >=,
    COMMUTATOR = >,
    PROCEDURE  = email_lt,
    RESTRICT   = scalarltsel,
    JOIN       = scalarltjoinsel
);

CREATE OPERATOR <= (
    LEFTARG    = EmailAddress,
    RIGHTARG   = EmailAddress,
    NEGATOR    = >,
    COMMUTATOR = >=,
    PROCEDURE  = email_le,
    RESTRICT   = scalarltsel,
    JOIN       = scalarltjoinsel
);

CREATE OPERATOR >= (
    LEFTARG    = EmailAddress,
    RIGHTARG   = EmailAddress,
    NEGATOR    = <,
    COMMUTATOR = <=,
    PROCEDURE  = email_ge,
    RESTRICT   = scalargtsel,
    JOIN       = scalargtjoinsel
);

CREATE OPERATOR > (
    LEFTARG    = EmailAddress,
    RIGHTARG   = EmailAddress,
    NEGATOR    = <=,
    COMMUTATOR = <,
    PROCEDURE  = email_gt,
    RESTRICT   = scalargtsel,
    JOIN       = scalargtjoinsel
);
CREATE OPERATOR ~ (
    LEFTARG    = EmailAddress,
    RIGHTARG   = EmailAddress,
    COMMUTATOR = ~,
    NEGATOR    = !~,
    PROCEDURE  = email_domain_eq,
    RESTRICT   = eqsel,
    JOIN       = eqjoinsel
);

CREATE OPERATOR !~ (
    LEFTARG    = EmailAddress,
    RIGHTARG   = EmailAddress,
    COMMUTATOR = !~,
    NEGATOR    = ~,
    PROCEDURE  = email_domain_neq,
    RESTRICT   = neqsel,
    JOIN       = neqjoinsel
);

CREATE FUNCTION email_cmp(EmailAddress, EmailAddress) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_hash(EmailAddress) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C STRICT IMMUTABLE;

CREATE OPERATOR CLASS email_ops
DEFAULT FOR TYPE EmailAddress USING btree AS
    OPERATOR    1   <  (EmailAddress, EmailAddress),
    OPERATOR    2   <= (EmailAddress, EmailAddress),
    OPERATOR    3   =  (EmailAddress, EmailAddress),
    OPERATOR    4   >= (EmailAddress, EmailAddress),
    OPERATOR    5   >  (EmailAddress, EmailAddress),
    FUNCTION    1   email_cmp(EmailAddress, EmailAddress);

CREATE OPERATOR CLASS email_ops
DEFAULT FOR TYPE EmailAddress USING hash AS
    OPERATOR    1   =  (EmailAddress, EmailAddress),
    FUNCTION    1   email_hash(EmailAddress);
