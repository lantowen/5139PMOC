---------------------------------------------------------------------------
--
-- complex.sql-
--    This file shows how to create a new user-defined type and how to
--    use this new type.
--
--
-- Portions Copyright (c) 1996-2013, PostgreSQL Global Development Group
-- Portions Copyright (c) 1994, Regents of the University of California
--
-- src/tutorial/complex.source
--
---------------------------------------------------------------------------

-----------------------------
-- Creating a new type:
--	We are going to create a new type called 'complex' which represents
--	complex numbers.
--	A user-defined type must have an input and an output function, and
--	optionally can have binary input and output functions.  All of these
--	are usually user-defined C functions.
-----------------------------

-- Assume the user defined functions are in _OBJWD_/complex$DLSUFFIX
-- (we do not want to assume this is in the dynamic loader search path).
-- Look at $PWD/complex.c for the source.  Note that we declare all of
-- them as STRICT, so we do not need to cope with NULL inputs in the
-- C code.  We also mark them IMMUTABLE, since they always return the
-- same outputs given the same inputs.

-- the input function 'complex_in' takes a null-terminated string (the
-- textual representation of the type) and turns it into the internal
-- (in memory) representation. You will get a message telling you 'complex'
-- does not exist yet but that's okay.

CREATE FUNCTION email_in(cstring)
   RETURNS email
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'complex_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION email_out(email)
   RETURNS cstring
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary input function 'complex_recv' takes a StringInfo buffer
-- and turns its contents into the internal representation.

CREATE FUNCTION email_recv(internal)
   RETURNS email
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary output function 'complex_send' takes the internal representation
-- and converts it into a (hopefully) platform-independent bytea string.

CREATE FUNCTION email_send(email)
   RETURNS bytea
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;
-- now, we can create the type. The internallength specifies the size of the
-- memory block required to hold the type (we need two 8-byte doubles).
CREATE TYPE email (
   internallength = 256,
   input = email_in,
   output = email_out,
   send = email_send,
   receive = email_recv,
   alignment = double
);
CREATE FUNCTION email_lt(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_le(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_eq(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_neq(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_ge(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_gt(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_domain_eq(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_domain_neq(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE OPERATOR = (
    LEFTARG    = email,
    RIGHTARG   = email,
    COMMUTATOR = =,
    NEGATOR    = <>,
    PROCEDURE  = email_eq,
    RESTRICT   = eqsel,
    JOIN       = eqjoinsel,
    HASHES,
    MERGES
);

CREATE OPERATOR <> (
    LEFTARG    = email,
    RIGHTARG   = email,
    NEGATOR    = =,
    COMMUTATOR = <>,
    PROCEDURE  = email_neq,
    RESTRICT   = neqsel,
    JOIN       = neqjoinsel
);

CREATE OPERATOR < (
    LEFTARG    = email,
    RIGHTARG   = email,
    NEGATOR    = >=,
    COMMUTATOR = >,
    PROCEDURE  = email_lt,
    RESTRICT   = scalarltsel,
    JOIN       = scalarltjoinsel
);

CREATE OPERATOR <= (
    LEFTARG    = email,
    RIGHTARG   = email,
    NEGATOR    = >,
    COMMUTATOR = >=,
    PROCEDURE  = email_le,
    RESTRICT   = scalarltsel,
    JOIN       = scalarltjoinsel
);

CREATE OPERATOR >= (
    LEFTARG    = email,
    RIGHTARG   = email,
    NEGATOR    = <,
    COMMUTATOR = <=,
    PROCEDURE  = email_ge,
    RESTRICT   = scalargtsel,
    JOIN       = scalargtjoinsel
);

CREATE OPERATOR > (
    LEFTARG    = email,
    RIGHTARG   = email,
    NEGATOR    = <=,
    COMMUTATOR = <,
    PROCEDURE  = email_gt,
    RESTRICT   = scalargtsel,
    JOIN       = scalargtjoinsel
);
CREATE OPERATOR ~ (
    LEFTARG    = email,
    RIGHTARG   = email,
    COMMUTATOR = ~,
    NEGATOR    = !~,
    PROCEDURE  = email_domain_eq,
    RESTRICT   = eqsel,
    JOIN       = eqjoinsel,
    HASHES,
    MERGES
);

CREATE OPERATOR !~ (
    LEFTARG    = email,
    RIGHTARG   = email,
    COMMUTATOR = !~,
    NEGATOR    = ~,
    PROCEDURE  = email_domain_neq,
    RESTRICT   = neqsel,
    JOIN       = neqjoinsel
);

CREATE FUNCTION email_cmp(email, email) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE TABLE test_email (
	a	email,
	b	email,
	c	email,
	d	email,
	e	email,
	f	email,
	g	email,
	h	email,
	i	email,
	j	email
);
INSERT INTO test_email values('jas@cse.unsw.edu.au','john-shepherd@hotmail.com',
'john.a.shepherd@gmail.com',
'J.Shepherd@unsw.edu.au',
'j.a.shepherd@acm.org',
'j-a-shepherd@bargain-hunter.com',
'jas@a-very-silly-domain.org',
'john1988@my-favourite.org',
'x-1@gmail.com',
'a@b.com');
UPDATE test_email
SET a='JAS@cse.unsw.EDU.AU';
--INSERT INTO test_email values('"jas"@cse.unsw.edu.au');
--INSERT INTO test_email values('j..shepherd@funny.email.org');
--INSERT INTO test_email values('123jas@marketing.abc.com');
--INSERT INTO test_email values('john@123buynow.com.au');
--INSERT INTO test_email values('jas@cse');
--INSERT INTO test_email values('john@cse.unsw@edu.au');
--INSERT INTO test_email values('x--@gmail.com');
SELECT * from test_email;
COPY BINARY test_email to '/tmp/testfile';
DELETE FROM test_email;
SELECT * from test_email;
COPY BINARY test_email FROM '/tmp/testfile';
SELECT * from test_email;
SELECT CAST('ABC@abc.com' AS email);

SELECT (CAST('a@abc.com' AS email) = CAST('abc@abc.com' AS email)), false AS expected;
SELECT (CAST('abcd@abc.com' AS email) = CAST('abc@abc.com' AS email)), false AS expected;
SELECT (CAST('abc@abc.com' AS email) = CAST('abcd@abc.com' AS email)), false AS expected;
SELECT (CAST('abc@abc.com' AS email) = CAST('abc@cba.com' AS email)), false AS expected;
SELECT (CAST('acb@abc.com' AS email) = CAST('abc@abc.com' AS email)), false AS expected;
SELECT (CAST('abc@abc.com' AS email) = CAST('abc@abc.com' AS email)), true AS expected;
DROP TABLE test_email;
CREATE TABLE test_email ( a email);
INSERT INTO test_email values('aaa@aaa.aaa');
INSERT INTO test_email values('aaa@aab.aaa');
INSERT INTO test_email values('aab@aaa.aaa');
INSERT INTO test_email values('bbb@bbb.bbb');
INSERT INTO test_email values('aa@aaa.aaa');
INSERT INTO test_email values('aaa@aa.aaa');
INSERT INTO test_email values('bb@bbb.bbb');
INSERT INTO test_email values('bbb@bb.bbb');

--SELECT t1.a, t2.a FROM test_email t1, test_email t2 where t1.a > t2.a;
SELECT * FROM test_email where a > 'aaa@aa.aaa';
SELECT * FROM test_email where a <= 'aaa@aa.aaa';

SELECT * FROM test_email where a < 'aaa@aa.aaa';
SELECT * FROM test_email where a >= 'aaa@aa.aaa';

SELECT * FROM test_email where a = 'aaa@aa.aaa';
SELECT * FROM test_email where a <> 'aaa@aa.aaa';

SELECT * FROM test_email where a ~ 'aaadadasdada@aa.aaa';
SELECT * FROM test_email where a !~ 'aaadadasdada@aa.aaa';

DROP TABLE test_email;










DROP TYPE email CASCADE;